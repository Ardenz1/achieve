// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid()) // Unique identifier
  email         String      @unique             // User's email
  password      String                           // User's hashed password
  createdAt     DateTime    @default(now())      // Timestamp for account creation
  updatedAt     DateTime    @updatedAt           // Auto-updated timestamp
  
  // Relations
  foodEntries   FoodEntry[] // One-to-many relationship with FoodEntry
  dayEntries    DayEntry[]
}

model DayEntry {
  id            String   @id @default(cuid())   // Unique identifier
  userId        String                              // User who owns this day log
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  date          DateTime @unique                    // Date of the entry (e.g., 1/22/25)
  weight        Float?                              // User's weight for that day (optional)

  // Summarized Nutrition Data
  totalCalories Float?   @default(0)               // DELETE THIS EVENTUALLY and th ones below, it's redundant
  totalCarbs    Float?   @default(0)               // Total carbohydrates
  totalProtein  Float?   @default(0)               // Total protein
  totalFat      Float?   @default(0)               // Total fat
  totalFiber    Float?   @default(0)               // Total fiber
  totalSugar    Float?   @default(0)               // Total sugar
  totalSodium   Float?   @default(0)               // Total sodium

  // Calculated Nutrition Breakdown
  calculatedCalories Float?   @default(0)               
  calculatedCarbs    Float?   @default(0)               
  calculatedProtein  Float?   @default(0)               
  calculatedFat      Float?   @default(0)               
  calculatedFiber    Float?   @default(0)               
  calculatedSugar    Float?   @default(0)               
  calculatedSodium   Float?   @default(0)               

  // Relations
  foodEntries   FoodEntry[] // One-to-many relationship with FoodEntry
}

model FoodEntry {
  id           String   @id @default(cuid())   // Unique identifier
  userId       String                              // User who logged the entry
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  dayId        String                              // Links food entry to a specific day
  dayEntry     DayEntry @relation(fields: [dayId], references: [id], onDelete: Cascade)

  // Entry details
  mealName     String?                           // Optional: Name of the meal (e.g., "Lunch")
  units        String                            // Measurement unit (e.g., "oz", "cups", "each")
  servingSize  Float                            
  amount       Float                             // Quantity eaten
  savedAt      DateTime @default(now())          // Timestamp when the entry was saved
  date         DateTime                          // DELETE THIS EVENTUALLY 

  // Nutrition breakdown
  calories     Float?                            
  carbs        Float?                            
  protein      Float?                            
  fat          Float?                            
  fiber        Float?                            
  sugar        Float?                            
  sodium       Float?                            

  // Nutrition breakdown calculated
  CalcCalories Float?                            
  CalcCarbs    Float?                            
  CalcProtein  Float?                            
  CalcFat      Float?                            
  CalcFiber    Float?                            
  CalcSugar    Float?                            
  CalcSodium   Float?                            
}